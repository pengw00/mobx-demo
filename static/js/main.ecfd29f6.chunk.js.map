{"version":3,"sources":["component/Row.js","component/Table.js","component/Controls.js","App.js","serviceWorker.js","index.js"],"names":["Row","props","react_default","a","createElement","data","name","salary","Table","store","this","employeesList","map","e","i","component_Row","key","totalSum","className","highEarnersCount","Component","observer","Controls","addEmployee","prompt","parseInt","_this","pushEmployee","clearList","onClick","reactjs_popup_es","trigger","position","configure","enforceActions","Store","time","push","sum","filter","length","decorate","observable","action","computed","appStore","App","component_Table","component_Controls","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOASiBA,EARJ,SAAAC,GACT,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKH,EAAMI,KAAKC,MAChBJ,EAAAC,EAAAC,cAAA,UAAKH,EAAMI,KAAKE,kBCDlBC,mLACO,IACGC,EAAUC,KAAKT,MAAfQ,MACV,OACIP,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBAGJF,EAAAC,EAAAC,cAAA,aACKK,EAAME,cAAcC,IAAI,SAACC,EAAGC,GAAJ,OACvBZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKF,EACLT,KAAMQ,OAIhBX,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAKK,EAAMQ,aAIjBf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,QAAf,YACahB,EAAAC,EAAAC,cAAA,SAAIK,EAAMU,iBAAV,cADb,wCA3BYC,aAoCHZ,EAFfA,EAAQa,YAASb,WCNFc,6MA5BZC,YAAc,WACd,IAAMjB,EAAOkB,OAAO,aACdjB,EAASkB,SAASD,OAAO,eAAgB,IAM9CE,EAAKzB,MAAMQ,MAAMkB,aAAa,CAAErB,OAAMC,cAGzCqB,UAAY,WACVF,EAAKzB,MAAMQ,MAAMmB,qFAIhB,OACE1B,EAAAC,EAAAC,cAAA,OAAKc,UAAU,YACbhB,EAAAC,EAAAC,cAAA,UAAQyB,QAASnB,KAAKkB,WAAtB,eACA1B,EAAAC,EAAAC,cAAA,UAAQyB,QAASnB,KAAKa,aAAtB,cACArB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,QAAS7B,EAAAC,EAAAC,cAAA,0BAA2B4B,SAAS,iBACpD9B,EAAAC,EAAAC,cAAA,6CAtBagB,oBCKvBa,YAAU,CAACC,gBAAgB,QAErBC,mDACJxB,cAAgB,CACd,CAAEL,KAAM,UAAW8B,KAAM,KACzB,CAAE9B,KAAM,sBAAuB8B,KAAM,8DAGrC1B,KAAKC,cAAgB,wCAEVE,GACXH,KAAKC,cAAc0B,KAAKxB,oCAIxB,IAAIyB,EAAM,EAEV,OADA5B,KAAKC,cAAcC,IAAI,SAAAC,GAAC,OAAIyB,GAAYzB,EAAEN,SACnC+B,2CAIP,OAAO5B,KAAKC,cAAc4B,OAAO,SAAA1B,GAAC,OAAIA,EAAEN,OAAS,MAAKiC,gBAK1DC,YAASN,EAAO,CACdxB,cAAe+B,IACfd,UAAWe,IACXhB,aAAcgB,IACd1B,SAAU2B,MAIZ,IAAMC,EAAW,IAAIV,EAYNW,MAVf,WACE,OACE5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCACEF,EAAAC,EAAAC,cAAC2C,EAAD,CAAUtC,MAAOoC,IACjB3C,EAAAC,EAAAC,cAAC4C,EAAD,CAAOvC,MAAOoC,MCrCFI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ecfd29f6.chunk.js","sourcesContent":["import React from \"react\";\n const Row = props => {\n    return (\n      <tr>\n        <td>{props.data.name}</td>\n        <td>{props.data.salary}</td>\n      </tr>\n    );\n  };\n  export default Row;","import React, { Component } from \"react\";\nimport Row from \"./Row\";\nimport { observer } from \"mobx-react\";\n\nclass Table extends Component {\n    render() {\n        const { store } = this.props\n      return (\n          <div>\n        <table>\n          <thead>\n            <tr>\n              <td>Type:</td>\n              <td>ID:</td>\n            </tr>\n          </thead>\n          <tbody>\n              {store.employeesList.map((e, i)=>\n                <Row\n                    key={i}\n                    data={e}\n                />\n                )}\n          </tbody>\n          <tfoot>\n              <tr>\n              <td>TOTAL Time:</td>\n              <td>{store.totalSum}</td>\n              </tr>\n          </tfoot>\n        </table>\n        <div className=\"fade\">\n            You have <u>{store.highEarnersCount} problems </u> that cost more that 800 ms.\n        </div>\n        </div>\n      );\n    }\n  }\n  Table = observer(Table);\n\n  export default Table;","import React, { Component } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nclass Controls extends Component {\n     addEmployee = () => {\n     const name = prompt(\"The type:\")\n     const salary = parseInt(prompt(\"The number:\"), 10)\n    \n    // seems to be working ok we are breaking a very important rule of Mobx: state data should be modified only through actions\n    //  this.props.store.employeesList.push({ name, salary });\n\n     //so use actions to change state in the store\n      this.props.store.pushEmployee({ name, salary })\n   }\n\n   clearList = () => {\n     this.props.store.clearList()\n    //  this.props.store.employeesList = [] //change outside the store\n   }\n    render() {\n      return (\n        <div className=\"controls\">\n          <button onClick={this.clearList}>clear table</button>\n          <button onClick={this.addEmployee}>add record</button>\n          <Popup trigger={<button> Trigger</button>} position=\"bottum center\">\n          <div>Popup content here !!</div>\n          </Popup>\n        </div>\n      );\n    }\n  }\n\n  export default Controls;","import React from 'react';\nimport Controls from \"./component/Table\";\nimport Table from \"./component/Controls\";\n\nimport {configure, action} from \"mobx\";\n\nimport { decorate, observable, computed } from \"mobx\";\n\nconfigure({enforceActions: true})\n\nclass Store {\n  employeesList = [\n    { name: \"Two Sum\", time: 150 },\n    { name: \"Dynamic Programming\", time: 225 },\n  ]\n  clearList(){\n    this.employeesList = []\n  }\n  pushEmployee(e) {\n    this.employeesList.push(e)\n  }\n\n  get totalSum(){\n    let sum = 0\n    this.employeesList.map(e => sum = sum + e.salary)\n    return sum\n  }\n\n  get highEarnersCount(){\n    return this.employeesList.filter(e => e.salary > 500).length;\n  }\n  \n}\n\ndecorate(Store, {\n  employeesList: observable,\n  clearList: action,\n  pushEmployee: action,\n  totalSum: computed\n});\n\n\nconst appStore = new Store()\n\nfunction App() {\n  return (\n    <div>\n      <h1>Leetcode Algorithm</h1>\n        <Controls store={appStore}/>\n        <Table store={appStore}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}